// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherOfCity;

#nullable disable

namespace WeatherOfCity.Migrations
{
    [DbContext(typeof(WeatherContext))]
    [Migration("20220718072437_add-role")]
    partial class addrole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WeatherOfCity.Models.City", b =>
                {
                    b.Property<int>("City_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("City_Id"), 1L, 1);

                    b.Property<string>("City_Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("City_Id");

                    b.HasIndex("City_Id")
                        .IsUnique();

                    b.ToTable("City", (string)null);

                    b.HasComment("Bảng Cty");
                });

            modelBuilder.Entity("WeatherOfCity.Models.Times", b =>
                {
                    b.Property<int>("time_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("time_Id"), 1L, 1);

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("time_Id");

                    b.HasIndex("City_Id");

                    b.ToTable("Times", (string)null);
                });

            modelBuilder.Entity("WeatherOfCity.Models.Users", b =>
                {
                    b.Property<Guid>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("role")
                        .HasColumnType("bit");

                    b.HasKey("user_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WeatherOfCity.Models.Weather", b =>
                {
                    b.Property<int>("Weather_Id")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("int");

                    b.Property<int>("time_Id")
                        .HasColumnType("int");

                    b.HasKey("Weather_Id");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("WeatherOfCity.Models.Times", b =>
                {
                    b.HasOne("WeatherOfCity.Models.City", "City")
                        .WithMany("times")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WeatherOfCity.Models.Weather", b =>
                {
                    b.HasOne("WeatherOfCity.Models.Times", "Times")
                        .WithOne("Weather")
                        .HasForeignKey("WeatherOfCity.Models.Weather", "Weather_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Times");
                });

            modelBuilder.Entity("WeatherOfCity.Models.City", b =>
                {
                    b.Navigation("times");
                });

            modelBuilder.Entity("WeatherOfCity.Models.Times", b =>
                {
                    b.Navigation("Weather")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
